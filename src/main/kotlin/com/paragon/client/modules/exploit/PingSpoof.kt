package com.paragon.client.modules.exploit

import com.paragon.backend.event.events.mc.TickEvent
import com.paragon.backend.event.events.net.PacketEvent
import com.paragon.backend.module.Category
import com.paragon.backend.module.Module
import com.paragon.mixin.duck.IClientConnection
import com.paragon.util.calculations.Timer
import com.paragon.util.mc
import me.bush.eventbus.annotation.EventListener
import net.minecraft.network.Packet
import net.minecraft.network.packet.c2s.play.KeepAliveC2SPacket
import java.util.concurrent.ConcurrentHashMap

/**
 * @author surge
 * @since 19/02/2023
 */
object PingSpoof : Module("Ping Spoof", "Spoofs your latency", Category.EXPLOIT) {

    private val delay by double("Delay", 125.0, 0.1, 25.0..1000.0, "The time before releasing packets")
    private val sequential by bool("Sequential", true, "If to send packets exactly at the original time sent + the delay")

    private val packetQueue = ConcurrentHashMap<Long, Packet<*>>()
    private val timer = Timer()

    override val info = { delay.toString() }

    override fun enable() {
        if (!sequential) {
            timer.reset()
        }
    }

    @EventListener
    fun onTick(event: TickEvent) {
        if (sequential) {
            packetQueue.forEach { (id: Long, packet: Packet<*>?) ->
                if (System.currentTimeMillis() - id >= delay) {
                    (mc.player!!.networkHandler.connection as IClientConnection).sendPacketNoEvent(packet)
                    packetQueue.remove(id)
                }
            }
        } else {
            if (timer.elapsed(delay)) {
                timer.reset()
                packetQueue.forEach { (id: Long?, packet: Packet<*>?) ->
                    (mc.player!!.networkHandler.connection as IClientConnection).sendPacketNoEvent(packet)
                    packetQueue.remove(id)
                }
            }
        }
    }

    @EventListener
    fun onPacketOutbound(event: PacketEvent.Outbound) {
        if (event.packet is KeepAliveC2SPacket) {
            event.isCancelled = true
            packetQueue[System.currentTimeMillis()] = event.packet
        }
    }

}